# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet parse_args "parse using argparse" b
def parse_args() -> argparse.Namespace:
	parser = argparse.ArgumentParser(description="$1")

	parser.add_argument('$2',${3: action=${4:'store_true'},}${5: default=${6:'default'},}${7: type=${8:int},} help="$9")

	return parser.parse_args()
endsnippet

snippet main "simple main" b
def main() -> None:
	${1:pass}

if __name__ == '__main__':
	main()
endsnippet

snippet arg "add argparse argument" b
parser.add_argument('${1:arg}', default=${2:default}, help="${3:help}")
endsnippet

snippet import "import a module" b
import ${1:os}
endsnippet

snippet from "import from a module" b
from $1 import $2
endsnippet

snippet init "Initialize function for a class" b
def __init__(self${1:, ${2: arg}}):
	${3:pass}
endsnippet
